scale_linetype_manual(values=c("dashed","8222","solid"),
labels=c("activity","rumination time","act. + rum."))  +
guides(color = guide_legend(keywidth = 3))
plot_model_sum2 <- plot_model_sum +
geom_point(data=rbind(ROC_df_cut_70, ROC_df_cut_30) %>% mutate(model2=paste(model,alp)),
aes(x=x, y=y, shape=model2), size=3, show.legend=F)  +
scale_shape_manual(
values = c("fit_Act 0.7"=0, "fit_Rum 0.7"=1, "fit_ActRum 0.7"=2,
"fit_Act 0.3"=15, "fit_Rum 0.3"=8, "fit_ActRum 0.3"=17))
ggsave(plot_model_sum2, width = 8, height = 6, filename = "fig_detection_by_model.png")
plot_model_sum2
plot_model_sum
plot_model_sum <- rbind(cbind(ROC3_CS$data, herd_season_gr="Conventional, Summer"),
cbind(ROC3_CW$data, herd_season_gr="Conventional, Winter"),
cbind(ROC3_OS$data, herd_season_gr="Organic, Summer"),
cbind(ROC3_OW$data, herd_season_gr="Organic, Winter")) %>%
ggplot(aes(x=x, y=y, color=model, linetype=model)) + geom_path(size=.75) +
labs(x = "False positive rate", y ="Sensitivity", color = "Model",
linetype = "Specification", title = NULL)  +
scale_color_discrete(labels=c("activity","rumination time","act. + rum.")) +
facet_wrap(~ herd_season_gr, nrow = 2) +
theme_minimal(base_size = 14) +  ylim(c(0, 1)) +
theme(legend.position = "bottom",
legend.background = element_rect(color = "white", fill = "white"),
axis.line = element_line(color="grey25", size=.5),
strip.background = element_rect(colour = "grey25", fill = "white")) +
scale_linetype_manual(values=c("dashed","8222","solid"),
labels=c("activity","rumination time","act. + rum."))  +
guides(color = guide_legend(keywidth = 3))
plot_model_sum
plot_model_sum <- rbind(cbind(ROC3_CS$data, herd_season_gr="Conventional, Summer"),
cbind(ROC3_CW$data, herd_season_gr="Conventional, Winter"),
cbind(ROC3_OS$data, herd_season_gr="Organic, Summer"),
cbind(ROC3_OW$data, herd_season_gr="Organic, Winter")) %>%
ggplot(aes(x=x, y=y, color=model, linetype=model)) + geom_path(size=.75) +
labs(x = "False positive rate", y ="Sensitivity", color = "Specification",
linetype = "Specification", title = NULL)  +
scale_color_discrete(labels=c("activity","rumination time","act. + rum.")) +
facet_wrap(~ herd_season_gr, nrow = 2) +
theme_minimal(base_size = 14) +  ylim(c(0, 1)) +
theme(legend.position = "bottom",
legend.background = element_rect(color = "white", fill = "white"),
axis.line = element_line(color="grey25", size=.5),
strip.background = element_rect(colour = "grey25", fill = "white")) +
scale_linetype_manual(values=c("dashed","8222","solid"),
labels=c("activity","rumination time","act. + rum."))  +
guides(color = guide_legend(keywidth = 3))
plot_model_sum
plot_model_sum2 <- plot_model_sum +
geom_point(data=rbind(ROC_df_cut_70, ROC_df_cut_30) %>% mutate(model2=paste(model,alp)),
aes(x=x, y=y, shape=model2), size=3, show.legend=F)  +
scale_shape_manual(
values = c("fit_Act 0.7"=0, "fit_Rum 0.7"=1, "fit_ActRum 0.7"=2,
"fit_Act 0.3"=15, "fit_Rum 0.3"=8, "fit_ActRum 0.3"=17))
ggsave(plot_model_sum2, width = 8, height = 6, filename = "fig_detection_by_model.png")
plot_model_sum2
logi_Rum %>% summary
logi_ActRum %>% summary
SCR_heat_season %>% filter(test3) %>% sum
SCR_heat_season %>% filter(test3) %>% nrow
5958 + 23258
library(rJava)
?install.packages
install.packages("rJava")
library(rJava)
install.packages("rJava",type="source")
install.packages("rJava",type="source")
install.packages("rJava",type="source")
if (Sys.info()['sysname'] == 'Darwin') {
libjvm <- paste0(system2('/usr/libexec/java_home',stdout = TRUE)[1],'/jre/lib/server/libjvm.dylib')
message (paste0('Load libjvm.dylib from: ',libjvm))
dyn.load(libjvm)
}
library(rJava)
shiny::runApp('Google Drive UMN/WI dairy/VisualBenchmarkWI')
install.packages("V8")
library(DT)
library(googleVis)
library(mongolite)
library(httr)
library(pryr)
runApp('Google Drive UMN/WI dairy/VisualBenchmarkWI')
# the first part of this file is the same as "WI_sample_data_1.4.R"
base_location <- "/Users/kota/Google Drive UMN/WI dairy"
# base_location <- "/Volumes/GoogleDrive/My Drive/WI dairy"
setwd(base_location)
# load packages
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
# load functions
source(paste0(base_location, "/R-files/DEA_base.R"))
source(paste0(base_location, "/R-files/f_DEA_TFP_decomp.R"))
source(paste0(base_location, "/R-files/f_DEA_TFP_helpers.R"))
# load data files
price_indices <- read_csv("data/price_indices.csv")
# adjust base year
adj_base_yr <- function(df, year_var, base_yr) {
df1 <- df %>% dplyr::select(-matches(year_var))
df1$tmp_yr <- df[[year_var]]
vec_base <- df1 %>% filter(tmp_yr == base_yr)
for (j in 1:ncol(df1)) {
df1[,j] <- df1[,j] / as.numeric(vec_base[1,j])
}
df1$tmp_yr <- NULL
cbind(df %>% dplyr::select(matches(year_var)), df1)
}
price_indices <- adj_base_yr(price_indices, "Year", base_yr=2010)
# load data files
df_05 <- read_csv("data/csv/AgFA2005.csv")
df_06 <- read_csv("data/csv/AgFA2006.csv")
df_07 <- read_csv("data/csv/AgFA2007.csv")
df_08 <- read_csv("data/csv/AgFA2008.csv")
df_09 <- read_csv("data/csv/AgFA2009.csv")
df_10 <- read_csv("data/csv/AgFA2010.csv")
df_11 <- read_csv("data/csv/AgFA2011.csv")
df_12 <- read_csv("data/csv/AgFA2012.csv")
df_13 <- read_csv("data/csv/AgFA2013.csv")
df_14 <- read_csv("data/csv/AgFA2014.csv")
df_15 <- read_csv("data/csv/AgFA2015.csv")
df_12$FarmID <- substr(df_12$FarmID, 3, 100)
df_13$FarmID <- substr(df_13$FarmID, 3, 100)
df_14$FarmID <- substr(df_14$FarmID, 3, 100)
df_15$FarmID <- substr(df_15$FarmID, 3, 100)
# append yearly data files
df_A <- rbind(df_05, df_06, df_07, df_08, df_09, df_10, df_11, df_12, df_13, df_14, df_15)
df_A <- df_A %>% filter(number_head > 0, !is.na(number_head))
# adjust the data definition
df_A <- df_A %>%
dplyr::mutate(
number_operators = as.numeric(number_operators),
num_operators = ifelse(is.na(number_operators), 1, number_operators),
lbs_milk_sold = as.numeric(lbs_milk_sold),
number_head = as.numeric(number_head),
farmid = reference_group(FarmID),
year = fiscal_year
)
# merge price indices
df_A <- df_A %>% left_join(price_indices, by=c("year"="Year"))
df_A$id <- NA
for(yr in 2005:2015) {
idx1 <- df_A$year == yr
df_A$id[idx1] <- 1:sum(idx1) + (yr - 2000)* 1000
}
# define productivity analysis variables
df_A <- df_A %>%
dplyr::mutate(
milk = lbs_milk_sold,
fringe_inc = (coop_dividends + mach_work + misc_income)/CPI,
other_inc = (resale_lvstk + calves_sold + cull_cows)/CPI + crops_sold/p_crop + fringe_inc,
gross_inc = milk_sold_inc + other_inc,
cow = number_head,
crop_exp = (chemicals + fert_lime + seed_plant_pur + other_crop_exp)/p_crop,
feed_purchased = feed_pur/p_feed,
feed_total = crop_exp + feed_purchased,
labor = (labor_hired_dep + labor_hired_nondep + employ_bens_dep + employ_bens_nondep +
num_operators * 40000 * (1 + 0.02)^(year-2005))/p_labor,
capital = (insurance + mort_int + other_int + repairs + taxes +
econ_mach_equip_depr + econ_building_depr + econ_lvstk_depr +
total_equity * 0.035)/p_machinery,
livestock_exp =  (vet_medicine + breeding_fees + other_lvstk_exp +  `cust heif`)/CPI,
net_livestock_exp = livestock_exp  - (resale_lvstk + calves_sold + cull_cows)/CPI,
other_exp = gas_fuel_oil/p_fuel + (auto_exp + cons_exp + mach_hire + rent_equip + rent_other +
+ supplies + utilities + milk_hauling +
milk_mrkt_hedge  + other_farm_exp)/CPI + livestock_exp,
other_net_exp = other_exp - other_inc
)
# dairy farm revenue ratio
df_A <- df_A %>%
dplyr::mutate(dairy_inc_rate = milk_sold_inc/gross_inc,
fringe_inc_rate = fringe_inc/gross_inc,
cull_sales_adj = cull_cows/CPI,
cull_sales_per_cow = cull_sales_adj/cow,
net_livestock_exp_cow =net_livestock_exp/cow,
crop_exp_cow = crop_exp/cow)
df_A %>% filter(crop_exp_cow > -1000 & crop_exp_cow < 1000) %>%
with(hist(crop_exp_cow))
# df_A %>% filter(net_livestock_exp_cow > -750 & net_livestock_exp_cow  < 750) %>%
#   with(hist(net_livestock_exp_cow))
# filter to keep only dairy farms based on minimum herd size and dairy revenue ratio
# apply any other outlier definitions
df_B <- df_A %>% filter(dairy_inc_rate > .7,
cow >=20,
fringe_inc_rate < .1,
cull_sales_per_cow < 750 #,
# net_livestock_exp_cow > -750,
# net_livestock_exp_cow < 750,
# crop_exp_cow > -1000,
# crop_exp_cow < 1000
)
# summary
df_B %>% dplyr::select(milk, cow, feed_total, labor, capital, other_exp,
crop_exp, feed_purchased, livestock_exp) %>% my_summary(digits=0)
# data check
df_B %>% filter(capital < 0) %>% nrow()
df_B %>% filter(other_exp < 0) %>% nrow()
df_B %>% filter(crop_exp_cow < 0) %>% nrow()
df_B %>% filter(feed_total < 0) %>% nrow()
df_B %>% filter(other_inc < 0) %>% nrow()
df_B %>% filter(capital < 0) %>%
dplyr::select(insurance, mort_int, other_int, repairs, taxes,
econ_mach_equip_depr, econ_building_depr, econ_lvstk_depr, total_equity) %>% summary()
# filter outliers again
df_B <- df_B %>% filter(other_inc > 0, capital > 0,  other_exp > 0, feed_total >0)
# summary
df_B %>% dplyr::select(milk, other_inc, cow, feed_total, labor, capital, other_exp,
crop_exp, feed_purchased) %>% my_summary(digits=0)
df_B %>% dplyr::select(milk, other_inc, cow, feed_total, labor, capital, other_exp,
crop_exp, feed_purchased) %>% apply(2, quantile,.05)
# num of obs
df_B %>% with(table(year))
((df_B %>% with(table(year)))/ (df_A %>% with(table(year)))) %>% round(2)
df_B %>% filter(year==2005) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
df_B %>% filter(year==2008) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
df_B %>% filter(year==2011) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
df_B %>% filter(year==2015) %>%
dplyr::select(milk, cow, feed_total, labor, capital, other_exp) %>% my_summary(digits=0)
# ----- adjust for crop enterprise budget -----
df_B <- df_B %>% dplyr::mutate(acres = as.numeric(acres_owned) + as.numeric(acres_rented))
calc_crop_share <- function(df, varname, year_var="year", newvar="newvar") {
df$tmp_timevar <- df[[year_var]]
tmp_newvar <- rep(NA, nrow(df))
# browser()
tmp_df <- df
for (yr in unique(df$tmp_timevar))
{
df_yr <- df %>% filter(tmp_timevar == yr)
lm1 <- lm(as.formula(paste(varname, "~ acres + cow" )),
data = df_yr)
coeff_cons <- lm1$coefficients[1]
coeff_acre <- lm1$coefficients[2]
coeff_cow <- lm1$coefficients[3]
tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
with(coeff_acre * acres/ (coeff_cons + coeff_acre * acres + coeff_cow * cow))
}
# bounded by 0 and 1
tmp_newvar[tmp_newvar<0] <- 0
tmp_newvar[tmp_newvar>1] <- 1
tmp_newvar[is.na(tmp_newvar)] <- 0
df[[newvar]] <- tmp_newvar
df <- df %>% dplyr::select(-tmp_timevar)
return(df)
}
tmp <- df_B %>% calc_crop_share("gas_fuel_oil", newvar="cr_sh_gas")
cr_sh_varlist <- c(# other-expense items
"gas_fuel_oil", "auto_exp", "cons_exp",
"mach_hire", "rent_equip",  "rent_other",
"supplies", "utilities", "other_farm_exp",
# labor-expense items
"labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity")
cr_sh_namelist <- paste0("cr_sh_", c(# other-expense items
"gas", "auto", "cons",
"mach", "rent_e",  "rent_o",
"supplies", "utilities", "other_f",
# labor-expense items
"labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity"))
tmp <- df_B
for (i in 1:length(cr_sh_varlist)) {
tmp <<- tmp  %>% calc_crop_share(cr_sh_varlist[i], newvar=cr_sh_namelist[i])
}
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% summary
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% apply(2,median, na.rm=T)  %>% round(2)
calc_crop_share <- function(df, varname, year_var="year", newvar="newvar") {
df$tmp_timevar <- df[[year_var]]
tmp_newvar <- rep(NA, nrow(df))
# browser()
tmp_df <- df
for (yr in unique(df$tmp_timevar))
{
df_yr <- df %>% filter(tmp_timevar == yr)
lm1 <- lm(as.formula(paste(varname, "~ acres + cow" )),
data = df_yr)
coeff_cons <- lm1$coefficients[1]
coeff_acre <- lm1$coefficients[2]
coeff_cow <- lm1$coefficients[3]
tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
with(coeff_acre * acres/ ( coeff_acre * acres + coeff_cow * cow))
# tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
#   with(coeff_acre * acres/ (coeff_cons + coeff_acre * acres + coeff_cow * cow))
}
# bounded by 0 and 1
tmp_newvar[tmp_newvar<0] <- 0
tmp_newvar[tmp_newvar>1] <- 1
tmp_newvar[is.na(tmp_newvar)] <- 0
df[[newvar]] <- tmp_newvar
df <- df %>% dplyr::select(-tmp_timevar)
return(df)
}
tmp <- df_B %>% calc_crop_share("gas_fuel_oil", newvar="cr_sh_gas")
cr_sh_varlist <- c(# other-expense items
"gas_fuel_oil", "auto_exp", "cons_exp",
"mach_hire", "rent_equip",  "rent_other",
"supplies", "utilities", "other_farm_exp",
# labor-expense items
"labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity")
cr_sh_namelist <- paste0("cr_sh_", c(# other-expense items
"gas", "auto", "cons",
"mach", "rent_e",  "rent_o",
"supplies", "utilities", "other_f",
# labor-expense items
"labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity"))
tmp <- df_B
for (i in 1:length(cr_sh_varlist)) {
tmp <<- tmp  %>% calc_crop_share(cr_sh_varlist[i], newvar=cr_sh_namelist[i])
}
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% apply(2,median, na.rm=T)  %>% round(2)
calc_crop_share <- function(df, varname, year_var="year", newvar="newvar") {
df$tmp_timevar <- df[[year_var]]
tmp_newvar <- rep(NA, nrow(df))
# browser()
tmp_df <- df
for (yr in unique(df$tmp_timevar))
{
df_yr <- df %>% filter(tmp_timevar == yr)
lm1 <- lm(as.formula(paste(varname, "~ acres + cow" )),
data = df_yr)
coeff_cons <- lm1$coefficients[1]
coeff_acre <- lm1$coefficients[2]
coeff_cow <- lm1$coefficients[3]
tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
with(coeff_acre * acres/ ( coeff_acre * acres + coeff_cow * cow))
# tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
#   with(coeff_acre * acres/ (coeff_cons + coeff_acre * acres + coeff_cow * cow))
}
# bounded by 0 and 1
# tmp_newvar[tmp_newvar<0] <- 0
# tmp_newvar[tmp_newvar>1] <- 1
tmp_newvar[is.na(tmp_newvar)] <- 0
df[[newvar]] <- tmp_newvar
df <- df %>% dplyr::select(-tmp_timevar)
return(df)
}
tmp <- df_B
for (i in 1:length(cr_sh_varlist)) {
tmp <<- tmp  %>% calc_crop_share(cr_sh_varlist[i], newvar=cr_sh_namelist[i])
}
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% summary
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% apply(2,median, na.rm=T)  %>% round(2)
lm(num_operators ~ acres + cow , data =df_B) %>% summary()
2.8*300/(2.8*300 + 3.8 * 200)
2.8*300/(2.8*300 + 3.8 * 200 + 9.5*10^3)
lm(num_operators -1 ~ acres + cow , data =df_B) %>% summary()
df_B$num_operators %>% mean(na.rm=T)
lm(num_operators -1.15 ~ acres + cow , data =df_B) %>% summary()
lm(total_equity ~ acres + cow , data =df_B) %>% summary()
lm(num_operators ~ 0 + acres + cow , data =df_B) %>% summary()
lm(num_operators ~ 0 + acres + cow  + year, data =df_B) %>% summary()
lm(num_operators ~ 0 + acres + cow, data =df_B %>% filter(year==2015)) %>% summary()
lm(num_operators ~ 0 + acres + cow, data =df_B %>% filter(year==2014)) %>% summary()
lm(num_operators ~ 0 + acres + cow, data =df_B %>% filter(year==2013)) %>% summary()
lm(num_operators ~ 0 + acres + cow, data =df_B %>% filter(year==2012)) %>% summary()
lm(labor ~ 0 + acres + cow, data =df_B %>% filter(year==2012)) %>% summary()
lm(labor ~ 0 + acres + cow, data =df_B %>% filter(year==2015)) %>% summary()
lm(labor ~ acres + cow, data =df_B %>% filter(year==2015)) %>% summary()
100 * 300 / (100 * 300 + 447 * 200)
100 * 300 / (100 * 300 + 447 * 200 + 12000)
100 * 300 / (100 * 300 + 447 * 100 + 12000)
100 * 300 / (100 * 300 + 447 * 100 )
lm(insurance ~ acres + cow, data =df_B %>% filter(year==2015)) %>% summary()
lm(capital ~ acres + cow, data =df_B %>% filter(year==2015)) %>% summary()
300 * 300 / (300 * 300 + 660 * 100 )
300 * 300 / (300 * 300 + 660 * 100 - 25580)
calc_crop_share <- function(df, varname, year_var="year", newvar="newvar") {
df$tmp_timevar <- df[[year_var]]
tmp_newvar <- rep(NA, nrow(df))
# browser()
tmp_df <- df
for (yr in unique(df$tmp_timevar))
{
df_yr <- df %>% filter(tmp_timevar == yr)
lm1 <- lm(as.formula(paste(varname, "~ acres + cow" )),
data = df_yr)
coeff_cons <- lm1$coefficients[1]
coeff_acre <- lm1$coefficients[2]
coeff_cow <- lm1$coefficients[3]
tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
with(coeff_acre * acres/ ( coeff_acre * acres + coeff_cow * cow))
# tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
#   with(coeff_acre * acres/ (coeff_cons + coeff_acre * acres + coeff_cow * cow))
}
# bounded by 0 and 1
tmp_newvar[tmp_newvar<0] <- 0
tmp_newvar[tmp_newvar>1] <- 1
tmp_newvar[is.na(tmp_newvar)] <- 0
df[[newvar]] <- tmp_newvar
df <- df %>% dplyr::select(-tmp_timevar)
return(df)
}
lm(num_operators ~ acres + cow , data =df_B) %>% summary()
tmp <- df_B %>% calc_crop_share("gas_fuel_oil", newvar="cr_sh_gas")
cr_sh_varlist <- c(# other-expense items
"gas_fuel_oil", "auto_exp", "cons_exp",
"mach_hire", "rent_equip",  "rent_other",
"supplies", "utilities", "other_farm_exp",
# labor-expense items
"labor",
# "labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity")
cr_sh_namelist <- paste0("cr_sh_", c(# other-expense items
"gas", "auto", "cons",
"mach", "rent_e",  "rent_o",
"supplies", "utilities", "other_f",
# labor-expense items
"labor",
# "labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity"))
tmp <- df_B
for (i in 1:length(cr_sh_varlist)) {
tmp <<- tmp  %>% calc_crop_share(cr_sh_varlist[i], newvar=cr_sh_namelist[i])
}
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% summary
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% apply(2,median, na.rm=T)  %>% round(2)
df_B2 <- tmp
runApp('VisualBenchmarkWI')
calc_crop_share <- function(df, varname, year_var="year", newvar="newvar") {
df$tmp_timevar <- df[[year_var]]
tmp_newvar <- rep(NA, nrow(df))
# browser()
tmp_df <- df
for (yr in unique(df$tmp_timevar))
{
df_yr <- df %>% filter(tmp_timevar == yr)
lm1 <- lm(as.formula(paste(varname, "~ acres + cow" )),
data = df_yr)
coeff_cons <- lm1$coefficients[1]
coeff_acre <- lm1$coefficients[2]
coeff_cow <- lm1$coefficients[3]
tmp_newvar[df$tmp_timevar == yr]  <- df_yr %>%
with(coeff_acre * acres/ ( coeff_acre * acres + coeff_cow * cow))
}
# bounded by 0 and 1
tmp_newvar[tmp_newvar<0] <- 0
tmp_newvar[tmp_newvar>1] <- 1
tmp_newvar[is.na(tmp_newvar)] <- 0
df[[newvar]] <- tmp_newvar
df <- df %>% dplyr::select(-tmp_timevar)
return(df)
}
lm(num_operators ~ acres + cow , data =df_B) %>% summary()
tmp <- df_B %>% calc_crop_share("gas_fuel_oil", newvar="cr_sh_gas")
cr_sh_varlist <- c(# other-expense items
"gas_fuel_oil", "auto_exp", "cons_exp",
"mach_hire", "rent_equip",  "rent_other",
"supplies", "utilities", "other_farm_exp",
# labor-expense items
"labor",
# "labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity")
cr_sh_namelist <- paste0("cr_sh_", c(# other-expense items
"gas", "auto", "cons",
"mach", "rent_e",  "rent_o",
"supplies", "utilities", "other_f",
# labor-expense items
"labor",
# "labor_hired_dep", "labor_hired_nondep", "employ_bens_dep", "employ_bens_nondep", "num_operators",
# capital-expense items
"insurance", "mort_int", "other_int", "repairs", "taxes",
"econ_mach_equip_depr", "econ_building_depr", "econ_lvstk_depr", "total_equity"))
tmp <- df_B
for (i in 1:length(cr_sh_varlist)) {
tmp <<- tmp  %>% calc_crop_share(cr_sh_varlist[i], newvar=cr_sh_namelist[i])
}
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% summary
tmp %>% dplyr::select(starts_with("cr_sh_")) %>% apply(2,median, na.rm=T)  %>% round(2)
df_B2$year %>% table
library(qreg)
library(rq)
library(quantreg)
?rq
runApp('VisualBenchmarkWI')
source('~/Google Drive UMN/WI dairy/R-files/WI_sample_data_1.4.R')
source('~/Google Drive UMN/WI dairy/R-files/WI_sample_for_app.R')
source('~/Google Drive UMN/WI dairy/R-files/WI_sample_for_app.R')
source('~/Google Drive UMN/WI dairy/R-files/WI_sample_for_app.R')
runApp('VisualBenchmarkWI')
df_B2 %>% colnames
df_15 %>% colnames
df_15 %>% head
df_15 %>% View
df_15$organic_products  %>% table
runApp('VisualBenchmarkWI')
shiny::runApp('~/Documents/shiny/AutomaticCalfFeeder')
setwd('~/Users/kota/Dropbox/R_projects/excel_Shiny')
setwd('~/Users/kota/Dropbox/R_projects/excel_Shiny')
setwd('~/Users/kota/Dropbox/R_projects/excel_Shiny')
setwd('/Users/kota/Dropbox/R_projects/excel_Shiny')
library(bookdown)
render_book('excel_shiny.Rmd', "bookdown::gitbook", output_dir = "docs", output_options = list(split_by ="chapter"))
